name: PNPM update -> PR

on:
  schedule:
    - cron: "0 9 * * *"   # 09:00 UTC
    - cron: "0 21 * * *"  # 21:00 UTC
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: pnpm-update
  cancel-in-progress: false

jobs:
  update-deps:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Per pnpm docs: install pnpm first, then setup-node with cache
      # Omitting `version:` uses your package.json "packageManager": "pnpm@9.15.0"
      - name: Setup pnpm
        id: setup_pnpm
        continue-on-error: true
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Add pnpm to PATH
        id: pnpm_path
        continue-on-error: true
        run: echo "${{ steps.setup_pnpm.outputs.bin_dest }}" >> "$GITHUB_PATH"

      - name: Setup Node
        id: setup_node
        continue-on-error: true
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install deps (frozen)
        id: install
        continue-on-error: true
        run: pnpm install --frozen-lockfile

      - name: Run pnpm update -L and capture logs
        id: run
        continue-on-error: true
        shell: bash
        run: |
          ts=$(date -u +'%Y-%m-%d_%H-%M-%S')   # filesystem-safe for artifact names
          echo "ts=$ts" >> "$GITHUB_OUTPUT"
          pnpm update -L 2>&1 | tee run.log
          ec=$?
          echo "exit_code=$ec" >> "$GITHUB_OUTPUT"

      - name: Detect changes
        id: changes
        continue-on-error: true
        shell: bash
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build package.json diff summary (exclude lockfile)
        id: pkgdiff
        continue-on-error: true
        shell: bash
        run: |
          files=$(git ls-files -m | grep -E '(^|/)package\.json$' || true)
          if [[ -z "$files" ]]; then
            echo "summary=No package.json changes." >> "$GITHUB_OUTPUT"
          else
            echo "summary<<EOF" >> "$GITHUB_OUTPUT"
            for f in $files; do
              echo "### $f"
              git --no-pager diff --unified=0 --no-color -- "$f" || true
              echo
            done
            echo "EOF" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload run log (artifact)
        id: artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pnpm-update-log-${{ steps.run.outputs.ts }}
          path: run.log
          if-no-files-found: warn

      # Create PR on success + changes using the default GITHUB_TOKEN
      - name: Create PR (GITHUB_TOKEN)
        id: cpr
        if: ${{ steps.changes.outputs.changed == 'true' && steps.run.outputs.exit_code == '0' }}
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(deps): update to latest with pnpm -L"
          title: "chore(deps): update to latest (pnpm -L) — ${{ steps.run.outputs.ts }}"
          body: |
            Automated dependency update via `pnpm update -L`.

            - Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - Log artifact: pnpm-update-log-${{ steps.run.outputs.ts }}

            **package.json diff summary**
            (lockfile intentionally omitted)
            ---
            ${{ steps.pkgdiff.outputs.summary }}
          branch: chore/pnpm-update-${{ steps.run.outputs.ts }}
          delete-branch: true
          labels: |
            dependencies
            automated
          assignees: robahtou

      - name: Collect PR URL + log tail (for update email)
        id: ctx
        if: ${{ steps.changes.outputs.changed == 'true' && steps.run.outputs.exit_code == '0' }}
        shell: bash
        run: |
          echo "pr_url=${{ steps.cpr.outputs.pull-request-url || 'N/A' }}" >> "$GITHUB_OUTPUT"
          if [[ -f run.log ]]; then
            echo "tail<<EOF" >> "$GITHUB_OUTPUT"
            tail -n 50 run.log >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            echo "tail=No run.log available." >> "$GITHUB_OUTPUT"
          fi

      # === Email ONLY when updates occurred (success + changes) ===
      - name: Send update email via Resend SMTP
        id: email
        if: ${{ steps.changes.outputs.changed == 'true' && steps.run.outputs.exit_code == '0' }}
        uses: dawidd6/action-send-mail@v6
        with:
          server_address: ${{ vars.SMTP_HOST }}     # smtp.resend.com
          server_port: ${{ vars.SMTP_PORT }}        # 587
          username: ${{ vars.SMTP_USERNAME }}       # resend
          password: ${{ secrets.RESEND_API_KEY }}   # Resend API key
          secure: false                             # 587 uses STARTTLS
          from: ${{ vars.EMAIL_FROM }}              # "GitHub Actions <updates@reactatx.org>"
          to: ${{ vars.EMAIL_TO }}                  # "roberto.fuentes@webfountain.io"
          subject: >
            [UPDATED] pnpm update — ${{ github.repository }} @ ${{ steps.run.outputs.ts }}
          body: |
            Repository: ${{ github.repository }}
            Workflow: ${{ github.workflow }} — Run #${{ github.run_number }}
            Status: success
            PNPM exit code: ${{ steps.run.outputs.exit_code }}
            Actor: ${{ github.actor }}

            PR: ${{ steps.ctx.outputs.pr_url }}

            package.json diff summary:
            ------------------------------------------------------------
            ${{ steps.pkgdiff.outputs.summary }}

            Tail of run.log (last 50 lines):
            ------------------------------------------------------------
            ${{ steps.ctx.outputs.tail }}

      # Final: fail job if ANY critical step failed (keeps GitHub failure emails)
      - name: Mark job failed if any step failed
        if: always()
        run: |
          failed=0
          if [ "${{ steps.checkout.outcome }}"   = "failure" ]; then echo "::error::Step 'checkout' failed";   failed=1; fi
          if [ "${{ steps.setup_pnpm.outcome }}" = "failure" ]; then echo "::error::Step 'setup_pnpm' failed"; failed=1; fi
          if [ "${{ steps.pnpm_path.outcome }}"  = "failure" ]; then echo "::error::Step 'pnpm_path' failed";  failed=1; fi
          if [ "${{ steps.setup_node.outcome }}" = "failure" ]; then echo "::error::Step 'setup_node' failed"; failed=1; fi
          if [ "${{ steps.install.outcome }}"    = "failure" ]; then echo "::error::Step 'install' failed";    failed=1; fi
          if [ "${{ steps.run.outcome }}"        = "failure" ]; then echo "::error::Step 'run' failed";        failed=1; fi
          if [ "${{ steps.changes.outcome }}"    = "failure" ]; then echo "::error::Step 'changes' failed";    failed=1; fi
          if [ "${{ steps.pkgdiff.outcome }}"    = "failure" ]; then echo "::error::Step 'pkgdiff' failed";    failed=1; fi
          if [ "${{ steps.artifact.outcome }}"   = "failure" ]; then echo "::error::Step 'artifact' failed";   failed=1; fi
          if [ "${{ steps.cpr.outcome }}"        = "failure" ]; then echo "::error::Step 'cpr' failed";        failed=1; fi
          if [ "${{ steps.run.outputs.exit_code }}" != "0" ]; then
            echo "::error::pnpm update -L failed with exit code ${{ steps.run.outputs.exit_code }}"
            failed=1
          fi
          if [ $failed -ne 0 ]; then exit 1; fi
